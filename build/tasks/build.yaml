apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build
spec:
  params:
    - name: PATH_CONTEXT
      description: xxxxxx
      type: string
      default: .
    - name: MAVEN_ARGS_APPEND
      description: Additional Maven arguments
      type: string
      default: ''
    - name: MAVEN_MIRROR_URL
      description: The base URL of a mirror used for retrieving artifacts
      type: string
      default: ''
    - name: MAVEN_CLEAR_REPO
      description: Remove the Maven repository after the artifact is built
      type: string
      default: 'false'
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint
      type: string
      default: 'false'
    - name: STORAGE_DRIVER
      description: The Buildah storage STORAGE_DRIVER
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: intermediate-image
        type: image
  steps :
    - name: gen-env-file
      command:
        - /bin/sh
        - '-c'
      args:
        - |-
          echo "MAVEN_CLEAR_REPO=$(params.MAVEN_CLEAR_REPO)" > env-file
          # https://docs.openshift.com/online/pro/using_images/s2i_images/java.html
          # https://robertopozzi.medium.com/implement-your-ci-cd-process-with-red-hat-openshift-pipelines-3936cbea7bf4
          echo "S2I_TARGET_DEPLOYMENTS_DIR=/deployments" >> env-file
          echo "S2I_SOURCE_DEPLOYMENTS_FILTER=*.war" >> env-file
          echo "S2I_SOURCE_CONFIGURATION_DIR=src/main/liberty" >> env-file
          echo "S2I_TARGET_CONFIGURATION_DIR=/deployments" >> env-file
          

          [[ '$(params.MAVEN_ARGS_APPEND)' != "" ]] &&
            echo "MAVEN_ARGS_APPEND=$(params.MAVEN_ARGS_APPEND)" >> env-file

          [[ '$(params.MAVEN_MIRROR_URL)' != "" ]] &&
            echo "MAVEN_MIRROR_URL=$(params.MAVEN_MIRROR_URL)" >> env-file

          echo "Generated Env file"
          echo "------------------------------"
          cat env-file
          echo "------------------------------"
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: envparams
          mountPath: /env-params
      workingDir: /env-params
    - name: generate
      command:
        - s2i
        - build
        - $(params.PATH_CONTEXT)
        - registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
        - '--image-scripts-url'
        - 'image:///usr/local/s2i'
        - '--as-dockerfile'
        - /gen-source/Dockerfile.gen
        - '--environment-file'
        - /env-params/env-file
      image: registry.redhat.io/ocp-tools-43-tech-preview/source-to-image-rhel8
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
      workingDir: /workspace/source
    - name: peek-at-assemble-script
      command:
        - sh
        - -c
        - cat /usr/local/s2i/assemble
      image: registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift
      volumeMounts:
        - name: gen-source
          mountPath: /gen-source
        - name: envparams
          mountPath: /env-params
      workingDir: /workspace/source
    - name: build
      command:
        - sh
        - -c 
        - "buildah bud '--tls-verify=$(params.TLSVERIFY)' '--storage-driver=$(params.STORAGE_DRIVER)' '--layers' '-f' /gen-source/Dockerfile.gen '-t' $(resources.outputs.intermediate-image.url) .; ls -lrt /deployments"
      image: registry.redhat.io/rhel8/buildah:8.4-13
      resources: {}
      volumeMounts:
        - name: pipeline-cache
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
      workingDir: /gen-source
    - name: view-images
      command:
        - buildah
        - images
        - '--storage-driver=$(params.STORAGE_DRIVER)'
      image: registry.redhat.io/rhel8/buildah:8.4-13
      resources: {}
      volumeMounts:
        - name: pipeline-cache
          mountPath: /var/lib/containers
    - name: list-image-contents
      command:
        - sh
        - -c
        - cat /gen-source/Dockerfile.gen && mnt=$(buildah mount '--storage-driver=$(params.STORAGE_DRIVER)' `buildah from localhost/intermediate '--storage-driver=$(params.STORAGE_DRIVER)'`); find $mnt
      image: registry.redhat.io/rhel8/buildah:8.4-13
      resources: {}
      volumeMounts:
        - name: pipeline-cache
          mountPath: /var/lib/containers
        - name: gen-source
          mountPath: /gen-source
  volumes:
    - emptyDir: {}
      name: envparams
    - emptyDir: {}
      name: gen-source
    - name: pipeline-cache
      persistentVolumeClaim:
        claimName: pipeline-task-cache-pvc
